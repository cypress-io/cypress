version: 2.1

defaults: &defaults
  parallelism: 1
  working_directory: ~/cypress
  parameters:
    executor:
      type: executor
      default: cy-doc
  executor: <<parameters.executor>>
  environment:
    ## set specific timezone
    TZ: "/usr/share/zoneinfo/America/New_York"

    ## store artifacts here
    CIRCLE_ARTIFACTS: /tmp/artifacts

    ## set so that e2e tests are consistent
    COLUMNS: 100
    LINES: 24

executors:
  # the Docker image with Cypress dependencies and Chrome browser
  cy-doc:
    docker:
      - image: cypress/browsers:node12.0.0-chrome73
    environment:
      PLATFORM: linux

  # Docker image with non-root "node" user
  non-root-docker-user:
    docker:
      - image: cypress/base:12.0.0
        user: node
    environment:
      PLATFORM: linux

  # executor to run on Mac OS
  # https://circleci.com/docs/2.0/executor-types/#using-macos
  # https://circleci.com/docs/2.0/testing-ios/#supported-xcode-versions
  mac:
    macos:
      xcode: "10.1.0"
    environment:
      PLATFORM: mac

commands:
  run-e2e-tests:
    parameters:
      browser:
        description: browser shortname to target
        type: string
      chunk:
        description: e2e test chunk number
        type: integer
    steps:
      - attach_workspace:
          at: ~/
      - run:
          command: npm run test-e2e -- --chunk << parameters.chunk >> --browser << parameters.browser >>
          working_directory: packages/server
      - store_test_results:
          path: /tmp/cypress
      - store-npm-logs

  store-npm-logs:
    description: Saves any NPM debug logs as artifacts in case there is a problem
    steps:
      - store_artifacts:
          path: ~/.npm/_logs

  # for caching node modules use project environment variable
  # like CACHE_VERSION=15
  save-cache:
    description: |
      Shorter command to save node_modules for a package
      Warning! Only works with "packages/<name>/node_modules"
    parameters:
      packageName:
        description: Name of the package to save, for example "server" or "desktop-gui"
        type: string
    steps:
      - save_cache:
          name: Saving cache for << parameters.packageName >>
          key: v{{ .Environment.CACHE_VERSION }}-{{ arch }}-{{ .Branch }}-deps-<< parameters.packageName >>-{{ checksum "packages/<< parameters.packageName >>/package.json" }}
          paths:
            - packages/<< parameters.packageName >>/node_modules

  save-caches:
    description: save each node_modules folder per package
    steps:
      # TODO switch to "save-cache" when it allows custom paths
      - save_cache:
          key: v{{ .Environment.CACHE_VERSION }}-{{ arch }}-{{ .Branch }}-deps-cli-{{ checksum "cli/package.json" }}
          paths:
            - cli/node_modules
      - save_cache:
          key: v{{ .Environment.CACHE_VERSION }}-{{ arch }}-{{ .Branch }}-deps-root-{{ checksum "package.json" }}
          paths:
            - node_modules
      - save-cache:
          packageName: coffee
      - save-cache:
          packageName: desktop-gui
      - save-cache:
          packageName: driver
      - save-cache:
          packageName: example
      # TODO switch to "save-cache" custom command when it allows passing list of paths
      - save_cache:
          key: v{{ .Environment.CACHE_VERSION }}-{{ arch }}-{{ .Branch }}-deps-electron-{{ checksum "packages/electron/package.json" }}
          paths:
            - packages/electron/node_modules
            - ~/.cache/electron
            - ~/.electron
      - save-cache:
          packageName: extension
      - save-cache:
          packageName: https-proxy
      - save-cache:
          packageName: launcher
      - save-cache:
          packageName: network
      - save-cache:
          packageName: reporter
      - save-cache:
          packageName: runner
      - save-cache:
          packageName: server
      - save-cache:
          packageName: socket
      - save-cache:
          packageName: static
      - save-cache:
          packageName: ts
      - save-cache:
          packageName: web-config

  restore-cache:
    description: |
      Shorter command to restore node_modules for a package.
      Since it does not list paths to restore, can restore any cache,
      as long the key is the same as the saved one.
    parameters:
      packageName:
        description: Name of the package to restore, for example "server" or "desktop-gui"
        type: string
      packagePath:
        description: Path to package.json file
        type: string
    steps:
      - restore_cache:
          name: Restoring cache for << parameters.packageName >>
          key: v{{ .Environment.CACHE_VERSION }}-{{ arch }}-{{ .Branch }}-deps-<< parameters.packageName >>-{{ checksum "<< parameters.packagePath >>" }}

  restore-caches:
    description: need to restore a separate cache for each package.json
    steps:
      - restore-cache:
          packageName: cli
          packagePath: cli/package.json
      - restore-cache:
          packageName: root
          packagePath: package.json
      - restore-cache:
          packageName: coffee
          packagePath: packages/coffee/package.json
      - restore-cache:
          packageName: desktop-gui
          packagePath: packages/desktop-gui/package.json
      - restore-cache:
          packageName: driver
          packagePath: packages/driver/package.json
      - restore-cache:
          packageName: example
          packagePath: packages/example/package.json
      - restore-cache:
          packageName: electron
          packagePath: packages/electron/package.json
      - restore-cache:
          packageName: extension
          packagePath: packages/extension/package.json
      - restore-cache:
          packageName: https-proxy
          packagePath: packages/https-proxy/package.json
      - restore-cache:
          packageName: launcher
          packagePath: packages/launcher/package.json
      - restore-cache:
          packageName: network
          packagePath: packages/network/package.json
      - restore-cache:
          packageName: reporter
          packagePath: packages/reporter/package.json
      - restore-cache:
          packageName: runner
          packagePath: packages/runner/package.json
      - restore-cache:
          packageName: server
          packagePath: packages/server/package.json
      - restore-cache:
          packageName: socket
          packagePath: packages/socket/package.json
      - restore-cache:
          packageName: static
          packagePath: packages/static/package.json
      - restore-cache:
          packageName: ts
          packagePath: packages/ts/package.json
      - restore-cache:
          packageName: web-config
          packagePath: packages/web-config/package.json

jobs:
  ## code checkout and NPM installs
  build:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Print working folder
          command: echo $PWD
      - run:
          name: print global NPM cache path
          command: echo $(npm -g bin)
      - run:
          name: print Node version
          command: node -v
      - run:
          name: print NPM version
          command: npm -v
      - run: npm run check-node-version

      ## make sure the TERM is set to 'xterm' in node (Linux only)
      ## else colors (and tests) will fail
      ## See the following information
      ##   * http://andykdocs.de/development/Docker/Fixing+the+Docker+TERM+variable+issue
      ##   * https://unix.stackexchange.com/questions/43945/whats-the-difference-between-various-term-variables
      - run: npm run check-terminal

      - run: npm run stop-only-all

      - restore-caches

      # show what is already cached globally
      - run: ls $(npm -g bin)
      - run: ls $(npm -g bin)/../lib/node_modules

      # Install the root packages
      # Link sup packages in ./node_modules/@packages/*
      # Install sub packages dependencies and build all sub packages via postinstall script
      # try several times, because flaky NPM installs ...
      - run: npm install || npm install
      - run:
          name: Top level packages
          command: npm ls --depth=0 || true

      # Prune so we do not save removed dependencies to cache
      - run: npm run all prune

      - save-caches
      - store-npm-logs

      ## save entire folder as artifact for other jobs to run without reinstalling
      - persist_to_workspace:
          root: ~/
          paths:
            - cypress

  lint:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/
      ## this will catch .only's in js/coffee as well
      - run: npm run lint-all
      - store-npm-logs

  unit-tests:
    <<: *defaults
    parallelism: 1
    steps:
      - attach_workspace:
          at: ~/
      # make sure mocha runs
      - run: npm run test-mocha
      # test binary build code
      - run: npm run test-scripts
      # make sure our snapshots are compared correctly
      - run: npm run test-mocha-snapshot
      # make sure packages with TypeScript can be transpiled to JS
      - run: npm run all build-js
      # run unit tests from individual packages
      - run: npm run all test -- --package cli
      - run: npm run all test -- --package electron
      - run: npm run all test -- --package extension
      - run: npm run all test -- --package https-proxy
      - run: npm run all test -- --package launcher
      - run: npm run all test -- --package network
      - run: npm run all test -- --package proxy
      - run: npm run all test -- --package reporter
      - run: npm run all test -- --package runner
      - run: npm run all test -- --package socket
      - run: npm run all test -- --package static
      - store_test_results:
          path: /tmp/cypress
      - store-npm-logs

  lint-types:
    <<: *defaults
    parallelism: 1
    steps:
      - attach_workspace:
          at: ~/
      - run:
          command: ls -la types
          working_directory: cli
      - run:
          command: ls -la chai
          working_directory: cli/types
      - run:
          command: npm run dtslint
          working_directory: cli
      - store-npm-logs

  "server-unit-tests":
    <<: *defaults
    parallelism: 2
    steps:
      - attach_workspace:
          at: ~/
      - run: npm run all test-unit -- --package server
      - store_test_results:
          path: /tmp/cypress
      - store-npm-logs

  "server-integration-tests":
    <<: *defaults
    parallelism: 2
    steps:
      - attach_workspace:
          at: ~/
      - run: npm run all test-integration -- --package server
      - store_test_results:
          path: /tmp/cypress
      - store-npm-logs

  "server-performance-tests":
      <<: *defaults
      steps:
      - attach_workspace:
          at: ~/
      - run:
          command: npm run all test-performance -- --package server
      - store_test_results:
          path: /tmp/cypress
      - store_artifacts:
          path: /tmp/artifacts
      - store-npm-logs

  "server-e2e-tests-chrome-1":
    <<: *defaults
    steps:
      - run-e2e-tests:
          browser: chrome
          chunk: 1

  "server-e2e-tests-chrome-2":
    <<: *defaults
    steps:
      - run-e2e-tests:
          browser: chrome
          chunk: 2

  "server-e2e-tests-chrome-3":
    <<: *defaults
    steps:
      - run-e2e-tests:
          browser: chrome
          chunk: 3

  "server-e2e-tests-chrome-4":
    <<: *defaults
    steps:
      - run-e2e-tests:
          browser: chrome
          chunk: 4

  "server-e2e-tests-chrome-5":
    <<: *defaults
    steps:
      - run-e2e-tests:
          browser: chrome
          chunk: 5

  "server-e2e-tests-chrome-6":
    <<: *defaults
    steps:
      - run-e2e-tests:
          browser: chrome
          chunk: 6

  "server-e2e-tests-chrome-7":
    <<: *defaults
    steps:
      - run-e2e-tests:
          browser: chrome
          chunk: 7

  "server-e2e-tests-chrome-8":
    <<: *defaults
    steps:
      - run-e2e-tests:
          browser: chrome
          chunk: 8

  "server-e2e-tests-electron-1":
    <<: *defaults
    steps:
      - run-e2e-tests:
          browser: electron
          chunk: 1

  "server-e2e-tests-electron-2":
    <<: *defaults
    steps:
      - run-e2e-tests:
          browser: electron
          chunk: 2

  "server-e2e-tests-electron-3":
    <<: *defaults
    steps:
      - run-e2e-tests:
          browser: electron
          chunk: 3

  "server-e2e-tests-electron-4":
    <<: *defaults
    steps:
      - run-e2e-tests:
          browser: electron
          chunk: 4

  "server-e2e-tests-electron-5":
    <<: *defaults
    steps:
      - run-e2e-tests:
          browser: electron
          chunk: 5

  "server-e2e-tests-electron-6":
    <<: *defaults
    steps:
      - run-e2e-tests:
          browser: electron
          chunk: 6

  "server-e2e-tests-electron-7":
    <<: *defaults
    steps:
      - run-e2e-tests:
          browser: electron
          chunk: 7

  "server-e2e-tests-electron-8":
    <<: *defaults
    steps:
      - run-e2e-tests:
          browser: electron
          chunk: 8

  "driver-integration-tests-chrome":
    <<: *defaults
    parallelism: 5
    steps:
      - attach_workspace:
          at: ~/
      - run:
          command: npm start
          background: true
          working_directory: packages/driver
      - run:
          command: $(npm bin)/wait-on http://localhost:3500
          working_directory: packages/driver
      - run:
          command: |
            CYPRESS_KONFIG_ENV=production \
            CYPRESS_RECORD_KEY=$PACKAGES_RECORD_KEY \
            npm run cypress:run -- --record --parallel --group 5x-driver-chrome --browser chrome
          working_directory: packages/driver
      - store_test_results:
          path: /tmp/cypress
      - store_artifacts:
          path: /tmp/artifacts
      - store-npm-logs

  # "driver-integration-tests-electron":
  #   <<: *defaults
  #   parallelism: 5
  #   steps:
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         command: npm start
  #         background: true
  #         working_directory: packages/driver
  #     - run:
  #         command: $(npm bin)/wait-on http://localhost:3500
  #         working_directory: packages/driver
  #     - run:
  #         command: |
  #           CYPRESS_KONFIG_ENV=production \
  #           CYPRESS_RECORD_KEY=$PACKAGES_RECORD_KEY \
  #           npm run cypress:run -- --record --parallel --group 5x-driver-electron --browser electron
  #         working_directory: packages/driver
  #     - store_test_results:
  #         path: /tmp/cypress
  #     - store_artifacts:
  #         path: /tmp/artifacts
  #     - store-npm-logs

  "desktop-gui-integration-tests-2x":
    <<: *defaults
    parallelism: 2
    steps:
      - attach_workspace:
          at: ~/
      - run:
          command: npm run build-prod
          working_directory: packages/desktop-gui
      - run:
          command: |
            CYPRESS_KONFIG_ENV=production \
            CYPRESS_RECORD_KEY=$PACKAGES_RECORD_KEY \
            npm run cypress:run -- --record --parallel --group 2x-desktop-gui
          working_directory: packages/desktop-gui
      - store_test_results:
          path: /tmp/cypress
      - store_artifacts:
          path: /tmp/artifacts
      - store-npm-logs

  "reporter-integration-tests":
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/
      - run:
          command: npm run build-prod
          working_directory: packages/reporter
      - run:
          command: |
            CYPRESS_KONFIG_ENV=production \
            CYPRESS_RECORD_KEY=$PACKAGES_RECORD_KEY \
            npm run cypress:run -- --record --parallel --group reporter
          working_directory: packages/reporter
      - store_test_results:
          path: /tmp/cypress
      - store_artifacts:
          path: /tmp/artifacts
      - store-npm-logs

  "run-launcher":
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/
      - run:
          command: node index.js
          working_directory: packages/launcher

  build-binary:
    <<: *defaults
    shell: /bin/bash --login
    steps:
      - run:
          name: Check environment variables before code sign (if on Mac)
          # NOTE
          # our Mac code sign works via electron-builder
          # by default, electron-builder will NOT sign app built in a pull request
          # even our internal one (!)
          # Usually this is not a problem, since we only build and test binary
          # built on "develop" and "master" branches
          # but if you need to really build and sign a Mac binary in a PR
          # set variable CSC_FOR_PULL_REQUEST=true
          command: |
            set -e
            if [[ "$OSTYPE" == "darwin"* ]]; then
              if [ -z "$CSC_LINK" ]; then
                echo "Need to provide environment variable CSC_LINK"
                  echo "with base64 encoded certificate .p12 file"
                exit 1
              fi
              if [ -z "$CSC_KEY_PASSWORD" ]; then
                echo "Need to provide environment variable CSC_KEY_PASSWORD"
                  echo "with password for unlocking certificate .p12 file"
                exit 1
              fi
            else
              echo "Not Mac platform, skipping code sign setup"
            fi

      - attach_workspace:
          at: ~/
      - run: $(npm bin)/print-arch
      - run:
          environment:
            DEBUG: electron-builder,electron-osx-sign*
          # if this is a forked pull request, the NEXT_DEV_VERSION environment variable
          # won't be set and we will use default version, since we are not going to
          # upload the dev binary build anywhere
          command: npm run binary-build -- --platform $PLATFORM --version ${NEXT_DEV_VERSION:-0.0.0-development}
      - run: npm run binary-zip -- --platform $PLATFORM
      # Cypress binary file should be zipped to cypress.zip
      - run: ls -l *.zip
      - store-npm-logs
      - persist_to_workspace:
          root: ~/
          paths:
            - cypress/cypress.zip

  upload-binary:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/
      - run: ls -l
      - run:
          name: upload unique binary
          command: |
            node scripts/binary.js upload-unique-binary \
              --file cypress.zip \
              --version $NEXT_DEV_VERSION
      - run: cat binary-url.json
      - store-npm-logs
      - persist_to_workspace:
          root: ~/
          paths:
            - cypress/binary-url.json

  test-kitchensink:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Cloning test project
          command: git clone https://github.com/cypress-io/cypress-example-kitchensink.git /tmp/repo
      - run:
          name: Install prod dependencies
          command: npm install --production
          working_directory: /tmp/repo
      - run:
          name: Example server
          command: npm start
          working_directory: /tmp/repo
          background: true
      - run:
          name: Run Kitchensink example project
          command: npm run cypress:run -- --project /tmp/repo
      - store_artifacts:
          path: /tmp/repo/cypress/screenshots
      - store_artifacts:
          path: /tmp/repo/cypress/videos
      - store-npm-logs

  "test-kitchensink-against-staging":
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Cloning test project
          command: git clone https://github.com/cypress-io/cypress-example-kitchensink.git /tmp/repo
      - run:
          name: Install prod dependencies
          command: npm install --production
          working_directory: /tmp/repo
      - run:
          name: Example server
          command: npm start
          working_directory: /tmp/repo
          background: true
      - run:
          name: Run Kitchensink example project
          command: |
            CYPRESS_PROJECT_ID=$TEST_KITCHENSINK_PROJECT_ID \
            CYPRESS_RECORD_KEY=$TEST_KITCHENSINK_RECORD_KEY \
            CYPRESS_ENV=staging \
            CYPRESS_video=false \
            npm run cypress:run -- --project /tmp/repo --record
      - store-npm-logs

  "test-against-staging":
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Cloning test project
          command: git clone https://github.com/cypress-io/cypress-test-tiny.git /tmp/repo
      - run:
          name: Run test project
          command: |
            CYPRESS_PROJECT_ID=$TEST_TINY_PROJECT_ID \
            CYPRESS_RECORD_KEY=$TEST_TINY_RECORD_KEY \
            CYPRESS_ENV=staging \
            npm run cypress:run -- --project /tmp/repo --record
      - store-npm-logs

  build-npm-package:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/
      - run: npm run check-next-dev-version
      - run:
          name: bump NPM version
          command: npm --no-git-tag-version --allow-same-version version ${NEXT_DEV_VERSION:-0.0.0-development}
      - run:
          name: build NPM package
          working_directory: cli
          command: npm run build
      - run:
          command: ls -la types
          working_directory: cli/build
      - run:
          name: list NPM package contents
          working_directory: cli/build
          command: npm run size
      - run:
          name: pack NPM package
          working_directory: cli/build
          command: npm pack
      - run:
          name: list created NPM package
          working_directory: cli/build
          command: ls -l
      # created file should have filename cypress-<version>.tgz
      - run: mkdir /tmp/urls
      - run: cp cli/build/cypress-${NEXT_DEV_VERSION:-0.0.0-development}.tgz cypress.tgz
      - run: cp cli/build/cypress-${NEXT_DEV_VERSION:-0.0.0-development}.tgz /tmp/urls/cypress.tgz
      - run: ls -l /tmp/urls
      - store-npm-logs
      - run: pwd
      - run: ls -l
      - persist_to_workspace:
          root: ~/
          paths:
            - cypress/cypress.tgz

  upload-npm-package:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/
      - run: ls -l
      # NPM package file should have filename cypress-<version>.tgz
      - run:
          name: upload NPM package
          command: |
            node scripts/binary.js upload-npm-package \
              --file cypress.tgz \
              --version $NEXT_DEV_VERSION
      - store-npm-logs
      - run: ls -l
      - run: cat npm-package-url.json
      - persist_to_workspace:
          root: ~/
          paths:
            - cypress/npm-package-url.json

  "test-binary-and-npm-against-other-projects":
    <<: *defaults
    steps:
      # needs uploaded NPM and test binary
      - attach_workspace:
          at: ~/
      - run: ls -la
      # make sure JSON files with uploaded urls are present
      - run: ls -la binary-url.json npm-package-url.json
      - run: cat binary-url.json
      - run: cat npm-package-url.json
      - run: mkdir /tmp/testing
      - run:
          name: create dummy package
          working_directory: /tmp/testing
          command: npm init -y
      - run:
          # install NPM from unique urls
          name: Install Cypress
          command: |
            node scripts/test-unique-npm-and-binary.js \
              --npm npm-package-url.json \
              --binary binary-url.json \
              --cwd /tmp/testing
      - run:
          name: Verify Cypress binary
          working_directory: /tmp/testing
          command: $(npm bin)/cypress verify
      - run:
          name: Post pre-release install comment
          command: |
            node scripts/add-install-comment.js \
              --npm npm-package-url.json \
              --binary binary-url.json
      - run:
          name: Running other test projects with new NPM package and binary
          command: |
            node scripts/test-other-projects.js \
              --npm npm-package-url.json \
              --binary binary-url.json \
              --provider circle
      - store-npm-logs

  "test-npm-module-and-verify-binary":
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/
      # make sure we have cypress.zip received
      - run: ls -l
      - run: ls -l cypress.zip cypress.tgz
      - run: mkdir test-binary
      - run:
          name: Create new NPM package
          working_directory: test-binary
          command: npm init -y
      - run:
          # install NPM from built NPM package folder
          name: Install Cypress
          working_directory: test-binary
          # force installing the freshly built binary
          command: CYPRESS_INSTALL_BINARY=/root/cypress/cypress.zip npm i /root/cypress/cypress.tgz
      - run:
          name: Verify Cypress binary
          working_directory: test-binary
          command: $(npm bin)/cypress verify
      - store-npm-logs

  # install NPM + binary zip and run against staging API
  "test-binary-against-staging":
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/
      - run: ls -l
      # make sure we have the binary and NPM package
      - run: ls -l cypress.zip cypress.tgz
      - run:
          name: Cloning test project
          command: git clone https://github.com/cypress-io/cypress-test-tiny.git /tmp/cypress-test-tiny
      - run:
          name: Install Cypress
          working_directory: /tmp/cypress-test-tiny
          # force installing the freshly built binary
          command: CYPRESS_INSTALL_BINARY=~/cypress/cypress.zip npm i ~/cypress/cypress.tgz
      - run:
          name: Run test project
          working_directory: /tmp/cypress-test-tiny
          command: |
            CYPRESS_PROJECT_ID=$TEST_TINY_PROJECT_ID \
            CYPRESS_RECORD_KEY=$TEST_TINY_RECORD_KEY \
            CYPRESS_ENV=staging \
            $(npm bin)/cypress run --record
      - store-npm-logs

  "test-binary-against-kitchensink":
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/
      # make sure the binary and NPM package files are present
      - run: ls -l
      - run: ls -l cypress.zip cypress.tgz
      - run:
          name: Cloning kitchensink project
          command: git clone --depth 1 https://github.com/cypress-io/cypress-example-kitchensink.git /tmp/kitchensink
      - run:
          command: npm install
          working_directory: /tmp/kitchensink
      - run:
          name: Install Cypress
          working_directory: /tmp/kitchensink
          # force installing the freshly built binary
          command: CYPRESS_INSTALL_BINARY=~/cypress/cypress.zip npm i ~/cypress/cypress.tgz
      - run:
          working_directory: /tmp/kitchensink
          command: npm run build
      - run:
          working_directory: /tmp/kitchensink
          command: npm start
          background: true
      - run:
          working_directory: /tmp/kitchensink
          command: npm run e2e
      - store-npm-logs

  test-binary-as-specific-user:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/
      # the user should be "node"
      - run: whoami
      - run: pwd
      # prints the current user's effective user id
      # for root it is 0
      # for other users it is a positive integer
      - run: node -e 'console.log(process.geteuid())'
      # make sure the binary and NPM package files are present
      - run: ls -l
      - run: ls -l cypress.zip cypress.tgz
      - run: mkdir test-binary
      - run:
          name: Create new NPM package
          working_directory: test-binary
          command: npm init -y
      - run:
          # install NPM from built NPM package folder
          name: Install Cypress
          working_directory: test-binary
          # force installing the freshly built binary
          command: CYPRESS_INSTALL_BINARY=~/cypress/cypress.zip npm i ~/cypress/cypress.tgz
      - run:
          name: Add Cypress demo
          working_directory: test-binary
          command: npx @bahmutov/cly init
      - run:
          name: Verify Cypress binary
          working_directory: test-binary
          command: DEBUG=cypress:cli $(npm bin)/cypress verify
      - run:
          name: Run Cypress binary
          working_directory: test-binary
          command: DEBUG=cypress:cli $(npm bin)/cypress run
      - store-npm-logs

linux-workflow: &linux-workflow
  jobs:
    - build
    - lint:
        name: Linux lint
        requires:
          - build
    - lint-types:
        requires:
          - build
    # unit, integration and e2e tests
    - unit-tests:
        requires:
          - build
    - server-unit-tests:
        requires:
          - build
    - server-integration-tests:
        requires:
          - build
    - server-performance-tests:
        requires:
          - build
    - server-e2e-tests-chrome-1:
        requires:
          - build
    - server-e2e-tests-chrome-2:
        requires:
          - build
    - server-e2e-tests-chrome-3:
        requires:
          - build
    - server-e2e-tests-chrome-4:
        requires:
          - build
    - server-e2e-tests-chrome-5:
        requires:
          - build
    - server-e2e-tests-chrome-6:
        requires:
          - build
    - server-e2e-tests-chrome-7:
        requires:
          - build
    - server-e2e-tests-chrome-8:
        requires:
          - build
    - server-e2e-tests-electron-1:
        requires:
          - build
    - server-e2e-tests-electron-2:
        requires:
          - build
    - server-e2e-tests-electron-3:
        requires:
          - build
    - server-e2e-tests-electron-4:
        requires:
          - build
    - server-e2e-tests-electron-5:
        requires:
          - build
    - server-e2e-tests-electron-6:
        requires:
          - build
    - server-e2e-tests-electron-7:
        requires:
          - build
    - server-e2e-tests-electron-8:
        requires:
          - build
    - driver-integration-tests-chrome:
        requires:
          - build
    ## TODO: add these back in when flaky tests are fixed
    # - driver-integration-tests-electron:
    #     requires:
    #       - build
    - desktop-gui-integration-tests-2x:
        requires:
          - build
    - reporter-integration-tests:
        requires:
          - build
    - run-launcher:
        requires:
          - build
    # various testing scenarios, like building full binary
    # and testing it on a real project
    - test-against-staging:
        context: test-runner:record-tests
        filters:
          branches:
            only:
              - develop
        requires:
          - build
    - test-kitchensink:
        requires:
          - build
    - test-kitchensink-against-staging:
        context: test-runner:record-tests
        filters:
          branches:
            only:
              - develop
        requires:
          - build
    - build-npm-package:
        requires:
          - build
    - upload-npm-package:
        context: test-runner:upload
        filters:
          branches:
            only:
              - develop
        requires:
          - build-npm-package
    - build-binary:
        requires:
          - build
    - upload-binary:
        context: test-runner:upload
        filters:
          branches:
            only:
              - develop
        requires:
          - build-binary
    - test-binary-and-npm-against-other-projects:
        context: test-runner:trigger-test-jobs
        filters:
          branches:
            only:
              - develop
        requires:
          - upload-npm-package
          - upload-binary
    - test-npm-module-and-verify-binary:
        filters:
          branches:
            only:
              - develop
        requires:
          - build-npm-package
          - build-binary
    - test-binary-against-staging:
        context: test-runner:record-tests
        filters:
          branches:
            only:
              - develop
        requires:
          - build-npm-package
          - build-binary
    - test-binary-against-kitchensink:
        filters:
          branches:
            only:
              - develop
        requires:
          - build-npm-package
          - build-binary
    - test-binary-as-specific-user:
        name: "test binary as a non-root user"
        executor: non-root-docker-user
        requires:
          - build-npm-package
          - build-binary
    - test-binary-as-specific-user:
        name: "test binary as a root user"
        requires:
          - build-npm-package
          - build-binary

mac-workflow: &mac-workflow
  jobs:
    - build:
        name: Mac build
        executor: mac
        filters:
          branches:
            only:
              - develop

    - lint:
        name: Mac lint
        executor: mac
        requires:
          - Mac build
        filters:
          branches:
            only:
              - develop

    # maybe run unit tests?

    - build-npm-package:
        name: Mac NPM package
        executor: mac
        requires:
          - Mac build
        filters:
          branches:
            only:
              - develop

    - upload-npm-package:
        name: Mac NPM package upload
        context: test-runner:upload
        executor: mac
        filters:
          branches:
            only:
              - develop
        requires:
          - Mac NPM package

    - build-binary:
        name: Mac binary
        context: org-global
        executor: mac
        filters:
          branches:
            only:
              - develop
        requires:
          - Mac build

    - upload-binary:
        name: Mac binary upload
        executor: mac
        context: test-runner:upload
        filters:
          branches:
            only:
              - develop
        requires:
          - Mac binary

    - test-kitchensink:
        name: Test Mac Kitchensink
        executor: mac
        filters:
          branches:
            only:
              - develop
        requires:
          - Mac build

    - test-binary-against-kitchensink:
        name: Test Mac binary against kitchensink
        executor: mac
        filters:
          branches:
            only:
              - develop
        requires:
          - Mac NPM package
          - Mac binary

    - test-binary-against-staging:
        context: test-runner:record-tests
        name: Test Mac binary against staging
        executor: mac
        filters:
          branches:
            only:
              - develop
        requires:
          - Mac NPM package
          - Mac binary

    - test-binary-and-npm-against-other-projects:
        context: test-runner:trigger-test-jobs
        name: Test Mac binary against other projects
        executor: mac
        filters:
          branches:
            only:
              - develop
        requires:
          - Mac NPM package upload
          - Mac binary upload

workflows:
  linux:
    <<: *linux-workflow
  mac:
    <<: *mac-workflow
