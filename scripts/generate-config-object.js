const fs = require('fs-extra')
const argv = process.argv
const dir = argv[2] ? argv[2] : '../cypress-documentation'
const file = `${dir}/source/guides/references/configuration.md`

function isNumeric (n) {
  return !isNaN(parseFloat(n)) && isFinite(n)
}

function optionType (val) {
  if (isNumeric(val)) {
    return 'number'
  }

  if (val === '{}') {
    return 'object'
  }

  return 'string'
}

function removePercentTags (val) {
  return val.replace(/{%(.*?)%}/g, (m, m0) => {
    let text = m0.replace(/"(.*?)"/g, (match) => {
      return match.replace(/ /g, '<==>')
    }).replace(/'(.*?)'/g, (match) => {
      return match.replace(/ /g, '<==>')
    })

    return text.trim().split(' ')[1].replace(/<==>/g, ' ')
  })
}

fs.readFile(file)
.then((value) => {
  const options = []

  const text = value.toString()
  let re = /##(.+?)\n.+?Option \| Default \| Description\n----- \| ---- \| ----\n(.+?)\n\n/gs

  let match = re.exec(text)

  while (match != null) {
    const category = {}

    category.name = match[1].trim()
    category.options = []

    const arr = match[2].replace(/\n/g, '|').split('|').map((item) => item.trim())

    for (let i = 0; i < arr.length; i += 3) {
      const defaultVal = arr[i + 1].replace(/`/g, '')

      let option = {
        name: arr[i].replace(/`/g, ''),
        default: defaultVal,
        type: optionType(defaultVal),
        description: removePercentTags(arr[i + 2]),
      }

      category.options.push(option)
    }

    options.push(category)

    match = re.exec(text)
  }

  const json = JSON.stringify(options, null, 2)

  return json
})
.then((json) => {
  return fs.writeFile('./packages/server/lib/modes/init/options.ts', `
/* eslint-disable */
// This file is generated by scripts/generate-config-object.js
// To generate this file, you need to download cypress-documentation project next to your cypress project.
// Then, type in node ./scripts/generate-config-object.js from cypress root dir. 
//
// If your cypress-documentation project is not next to cypress project, 
// specify the path to the project as the first argument. 

export const optionInfo = ${json}
`.trim())
})
.then(() => {
  // eslint-disable-next-line no-console
  console.log('config object generation finished.')
})
