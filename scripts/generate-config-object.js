const fs = require('fs-extra')
const argv = process.argv
const dir = argv[2] ? argv[2] : '../cypress-documentation'
const file = `${dir}/source/guides/references/configuration.md`

function isNumeric (n) {
  return !isNaN(parseFloat(n)) && isFinite(n)
}

function decodeDefaultValue (val) {
  if (isNumeric(val)) {
    return parseFloat(val)
  }

  if (val === '{}') {
    return {}
  }

  if (val === 'true') {
    return true
  }

  if (val === 'false') {
    return false
  }

  if (val === 'null') {
    return null
  }

  return val
}

function optionType (name, val) {
  if (isNumeric(val) || name === 'port') {
    return 'number'
  }

  if (val === '{}' || name === 'reporterOptions') {
    return 'object'
  }

  if (name === 'blacklistHosts') {
    return 'array'
  }

  return 'text'
}

function removePercentTags (val) {
  return val.replace(/{%(.*?)%}/g, (m, m0) => {
    let text = m0.replace(/"(.*?)"/g, (match) => {
      return match.replace(/ /g, '<==>')
    }).replace(/'(.*?)'/g, (match) => {
      return match.replace(/ /g, '<==>')
    })

    return text.trim().split(' ')[1].replace(/<==>/g, ' ')
  })
}

fs.readFile(file)
.then((value) => {
  const options = []

  const text = value.toString()
  let re = /##(.+?)\n.+?Option \| Default \| Description\n----- \| ---- \| ----\n(.+?)\n\n/gs

  let match = re.exec(text)

  while (match != null) {
    const category = {}

    category.name = match[1].trim()
    category.options = []

    const arr = match[2].replace(/\n/g, '|').split('|').map((item) => item.trim())

    for (let i = 0; i < arr.length; i += 3) {
      const name = arr[i].replace(/`/g, '')
      const defaultVal = arr[i + 1].replace(/`/g, '')

      let option = {
        name,
        default: decodeDefaultValue(defaultVal),
        type: optionType(name, defaultVal),
        description: removePercentTags(arr[i + 2]),
      }

      category.options.push(option)
    }

    options.push(category)

    match = re.exec(text)
  }

  return options
})
.then((options) => {
  const optionInfo = JSON.stringify(options, null, 2)
  const defaultValues = {}

  options.forEach((category) => {
    category.options.forEach((option) => {
      defaultValues[option.name] = option.default
    })
  })

  const defaultValuesJson = JSON.stringify(defaultValues, null, 2)

  return fs.writeFile('./packages/server/lib/modes/init/scaffold/option_info.ts', `
/* eslint-disable */
// This file is generated by scripts/generate-config-object.js
// To generate this file, you need to download cypress-documentation project next to your cypress project.
// Then, execute node ./scripts/generate-config-object.js from cypress root dir. 
//
// If your cypress-documentation project is not next to cypress project, 
// specify the path to the project as the first argument. 

export const optionInfo = ${optionInfo}

export const defaultValues = ${defaultValuesJson}
`.trim())
})
.then(() => {
  // eslint-disable-next-line no-console
  console.log('config object generation finished.')
})
