diff --git a/node_modules/semantic-release-monorepo/src/lerna-utils.js b/node_modules/semantic-release-monorepo/src/lerna-utils.js
new file mode 100644
index 0000000..1b620f8
--- /dev/null
+++ b/node_modules/semantic-release-monorepo/src/lerna-utils.js
@@ -0,0 +1,24 @@
+const execa = require('execa');
+
+const lerna = async (args, options = {}) => {
+  const { stdout } = await execa('lerna', args, options);
+  return stdout;
+};
+
+/**
+ * @async
+ * @return {Promise<Object>} Registered lerna packages
+ */
+const getPackageInfo = async () => JSON.parse(await lerna(['la', '--json']));
+
+/**
+ * @async
+ * @return {Promise<Object>} Registered lerna packages and their lerna dependencies
+ */
+const getDependencyGraph = async () =>
+  JSON.parse(await lerna(['la', '--graph']));
+
+module.exports = {
+  getPackageInfo,
+  getDependencyGraph,
+};
diff --git a/node_modules/semantic-release-monorepo/src/only-package-commits.js b/node_modules/semantic-release-monorepo/src/only-package-commits.js
index fbcb315..1c39529 100644
--- a/node_modules/semantic-release-monorepo/src/only-package-commits.js
+++ b/node_modules/semantic-release-monorepo/src/only-package-commits.js
@@ -1,10 +1,11 @@
-const { identity, memoizeWith, pipeP } = require('ramda');
+const { identity, memoizeWith, pipeP, propEq } = require('ramda');
 const pkgUp = require('pkg-up');
 const readPkg = require('read-pkg');
 const path = require('path');
 const pLimit = require('p-limit');
 const debug = require('debug')('semantic-release:monorepo');
 const { getCommitFiles, getRoot } = require('./git-utils');
+const { getPackageInfo, getDependencyGraph } = require('./lerna-utils');
 const { mapCommits } = require('./options-transforms');
 
 const memoizedGetCommitFiles = memoizeWith(identity, getCommitFiles);
@@ -12,11 +13,50 @@ const memoizedGetCommitFiles = memoizeWith(identity, getCommitFiles);
 /**
  * Get the normalized PACKAGE root path, relative to the git PROJECT root.
  */
+const normalizedPath = async packagePath => {
+  const gitRoot = await getRoot();
+
+  return path.relative(gitRoot, packagePath);
+};
+
 const getPackagePath = async () => {
   const packagePath = await pkgUp();
-  const gitRoot = await getRoot();
 
-  return path.relative(gitRoot, path.resolve(packagePath, '..'));
+  return normalizedPath(path.resolve(packagePath, '..'));
+};
+
+const getUsedLocalPrivatePackages = async () => {
+  const { dependencies } = await readPkg();
+
+  if (!dependencies) {
+    return [];
+  }
+
+  const lernaPackages = await getPackageInfo();
+  const privatePackages = lernaPackages
+  .filter(propEq('private', true))
+  .filter((p) => !p.name.includes('@package') && !p.name === 'cypress');
+  const dependencyGraph = await getDependencyGraph();
+
+  // build a list of private local packages
+  // including all children
+  const localPackages = [];
+
+  const addLocalDependency = dep => {
+    const dependency = privatePackages.find(propEq('name', dep));
+
+    if (dependency && !localPackages.includes(dependency)) {
+      localPackages.push(dependency);
+
+      const dependencies = dependencyGraph[dep];
+      dependencies.forEach(addLocalDependency);
+    }
+  };
+
+  Object.keys(dependencies).forEach(addLocalDependency);
+
+  // return paths to packages relative to git root
+  return Promise.all(localPackages.map(dep => normalizedPath(dep.location)));
 };
 
 const withFiles = async commits => {
@@ -33,21 +73,30 @@ const withFiles = async commits => {
 
 const onlyPackageCommits = async commits => {
   const packagePath = await getPackagePath();
-  debug('Filter commits by package path: "%s"', packagePath);
+  debug('Package path: "%s"', packagePath);
+
+  const localPackages = await getUsedLocalPrivatePackages();
+  debug('Local packages: "%o"', localPackages);
+
+  const paths = [packagePath, ...localPackages];
+  debug('Filter commits by package paths: "%o"', paths);
+
   const commitsWithFiles = await withFiles(commits);
-  // Convert package root path into segments - one for each folder
-  const packageSegments = packagePath.split(path.sep);
+
+  // Convert paths into segments - one for each folder
+  const pathSegments = paths.map(p => p.split(path.sep));
 
   return commitsWithFiles.filter(({ files, subject }) => {
     // Normalise paths and check if any changed files' path segments start
-    // with that of the package root.
-    const packageFile = files.find(file => {
-      const fileSegments = path.normalize(file).split(path.sep);
-      // Check the file is a *direct* descendent of the package folder (or the folder itself)
-      return packageSegments.every(
-        (packageSegment, i) => packageSegment === fileSegments[i]
-      );
-    });
+    // with that of the package root or local dependency paths
+    const packageFile = files.find(file =>
+      pathSegments.some(segments => {
+        const fileSegments = path.normalize(file).split(path.sep);
+
+        // Check the file is a *direct* descendent of the path
+        return segments.every((segment, i) => segment === fileSegments[i]);
+      })
+    );
 
     if (packageFile) {
       debug(
