import type { OpenFileInIdeQuery } from '../../src/generated/graphql-test'
import RelevantRunsDataSource_RunsByCommitShas from '../fixtures/gql-RelevantRunsDataSource_RunsByCommitShas.json'

Cypress.on('window:before:load', (win) => {
  win.__CYPRESS_GQL_NO_SOCKET__ = 'true'
})

// These mocks all the responses so we can get deterministic
// results to test the debug page.
// The JSON fixtures were generated by using a real app and capturing
// the responses.
describe('App - Debug Page', () => {
  beforeEach(() => {
    cy.scaffoldProject('cypress-in-cypress')
    cy.openProject('cypress-in-cypress')
    cy.startAppServer('component')

    cy.loginUser()
    cy.withCtx((ctx) => {
      ctx.git?.__setGitHashesForTesting(['commit1', 'commit2'])
    })

    cy.remoteGraphQLIntercept((obj, _testState, options) => {
      if (obj.operationName === 'RelevantRunsDataSource_RunsByCommitShas') {
        obj.result.data = options.RelevantRunsDataSource_RunsByCommitShas.data
      }

      return obj.result
    }, { RelevantRunsDataSource_RunsByCommitShas })
  })

  it('all tests passed', () => {
    // This mocks all the responses so we can get deterministic
    // results to test the debug page.
    cy.intercept('query-Debug', {
      fixture: 'debug-Passing/gql-Debug.json',
    })

    cy.intercept('query-CloudViewerAndProject_RequiredData', {
      fixture: 'debug-Passing/gql-CloudViewerAndProject_RequiredData.json',
    })

    cy.intercept('query-MainAppQuery', {
      fixture: 'debug-Passing/gql-MainAppQuery.json',
    })

    cy.intercept('query-SideBarNavigationContainer', {
      fixture: 'debug-Passing/gql-SideBarNavigationContainer',
    })

    cy.intercept('query-HeaderBar_HeaderBarQuery', {
      fixture: 'debug-Passing/gql-HeaderBar_HeaderBarQuery',
    })

    cy.intercept('query-SpecsPageContainer', {
      fixture: 'debug-Passing/gql-SpecsPageContainer',
    })

    cy.visitApp()

    cy.findByTestId('sidebar-link-debug-page').click()
    cy.findByTestId('debug-container').should('be.visible')

    cy.findByTestId('header-top').contains('update projectId')
    cy.findByTestId('debug-header-dashboard-link')
    .contains('View in Cypress Cloud')
    .should('have.attr', 'href', 'https://cloud.cypress.io/projects/7p5uce/runs/2')

    cy.findByTestId('debug-runNumber-PASSED').contains('#2')
    cy.findByTestId('debug-commitsAhead').contains('You are 1 commit ahead')

    cy.findByTestId('metadata').within(() => {
      cy.get('[title="passed"]').contains('2')
      cy.get('[title="failed"]').contains('0')
      cy.get('[title="skipped"]').contains('0')
      cy.get('[title="pending"]').contains('2')
      cy.findByTestId('debug-header-branch').contains('main')
      cy.findByTestId('debug-header-commitHash').contains('e9d176f')
      cy.findByTestId('debug-header-author').contains('Lachlan Miller')
      cy.findByTestId('debug-header-createdAt').contains('02h 00m 10s')
    })

    cy.findByTestId('debug-passed').contains('Well Done!')
    cy.findByTestId('debug-passed').contains('All your tests passed.')
    cy.findByLabelText('Relevant run passed').should('be.visible').contains('0')
    cy.findByTestId('run-failures').should('not.exist')
  })

  it('shows information about a failed spec', () => {
    cy.intercept('query-Debug', {
      fixture: 'debug-Failing/gql-Debug.json',
    })

    cy.intercept('query-CloudViewerAndProject_RequiredData', {
      fixture: 'debug-Failing/gql-CloudViewerAndProject_RequiredData.json',
    })

    cy.intercept('query-MainAppQuery', {
      fixture: 'debug-Failing/gql-MainAppQuery.json',
    })

    cy.intercept('query-SideBarNavigationContainer', {
      fixture: 'debug-Failing/gql-SideBarNavigationContainer',
    })

    cy.intercept('query-HeaderBar_HeaderBarQuery', {
      fixture: 'debug-Failing/gql-HeaderBar_HeaderBarQuery',
    })

    cy.intercept('query-SpecsPageContainer', {
      fixture: 'debug-Failing/gql-SpecsPageContainer',
    })

    cy.intercept('query-OpenFileInIDE', (req) => {
      req.on('response', (res) => {
        const gqlData = res.body.data as OpenFileInIdeQuery

        gqlData.localSettings.preferences.preferredEditorBinary = 'code'
      })
    })

    cy.intercept('mutation-OpenFileInIDE_Mutation').as('openFileInIDE')

    cy.withCtx((ctx, { sinon }) => {
      sinon.stub(ctx.actions.file, 'openFile')
    })

    cy.visitApp()

    cy.findByTestId('sidebar-link-debug-page').click()
    cy.findByTestId('debug-container').should('be.visible')

    cy.findByTestId('header-top').contains('chore: testing cypress')
    cy.findByTestId('debug-header-dashboard-link')
    .contains('View in Cypress Cloud')
    .should('have.attr', 'href', 'https://cloud.cypress.io/projects/vgqrwp/runs/136')

    cy.findByLabelText('Relevant run had 1 test failure').should('be.visible').contains('1')

    cy.findByTestId('debug-runNumber-FAILED').contains('#136')
    cy.findByTestId('debug-commitsAhead').contains('You are 1 commit ahead')

    cy.findByTestId('metadata').within(() => {
      cy.get('[title="passed"]').contains('1')
      cy.get('[title="failed"]').contains('1')
      cy.get('[title="skipped"]').contains('0')
      cy.get('[title="pending"]').contains('0')
      cy.findByTestId('debug-header-branch').contains('main')
      cy.findByTestId('debug-header-commitHash').contains('commit1')
      cy.findByTestId('debug-header-author').contains('Lachlan Miller')
      cy.findByTestId('debug-header-createdAt').contains('00m 19s')
    })

    cy.findByTestId('spec-contents').within(() => {
      cy.contains('src/components/InfoPanel/InfoPanel.cy.ts')
      cy.findByTestId('metaData-Results-spec-duration').contains('00:04')
      cy.findByTestId('metaData-Results-operating-system').contains('Linux Ubuntu')
      cy.findByTestId('metaData-Results-browser').contains('Electron 106')
      cy.findByTestId('metaData-Results-testing-type').contains('Component')
    })

    cy.findByTestId('test-row').contains('InfoPanel')
    cy.findByTestId('test-row').contains('renders')
    cy.findByTestId('run-failures').should('exist').should('have.attr', 'href', '#/specs/runner?file=src/components/InfoPanel/InfoPanel.cy.ts&mode=debug')

    cy.findByLabelText('Open in IDE').click()
    cy.wait('@openFileInIDE')
    cy.withCtx((ctx) => {
      expect(ctx.actions.file.openFile).to.have.been.calledWith('src/components/InfoPanel/InfoPanel.cy.ts', 1, 1)
    })
  })
})
