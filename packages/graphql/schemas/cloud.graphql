### This file was generated by Nexus Schema
### Do not make changes to this file directly

"""
A CloudOrganization represents an Organization stored in the Cypress Cloud
"""
type CloudOrganization implements Node {
  """
  Globally unique identifier representing a concrete GraphQL ObjectType
  """
  id: ID!

  """
  Name of the organization
  """
  name: String

  """
  A connection for cloud projects associated with this organization
  """
  projects(
    after: String
    before: String
    first: Int
    last: Int
  ): CloudProjectConnection
}

"""
A Connection adhering to the Relay Specification
"""
type CloudOrganizationConnection {
  """
  A list of edges.
  """
  edges: [CloudOrganizationEdge!]!

  """
  A list of nodes.
  """
  nodes: [CloudOrganization!]!

  """
  PageInfo result for the connection
  """
  pageInfo: PageInfo!
}

type CloudOrganizationEdge {
  cursor: String!

  """
  An edge adhering to the Relay Connection spec
  """
  node: CloudOrganization!
}

"""
A CloudProject represents a Project stored in the Cypress Cloud
"""
type CloudProject implements Node {
  """
  Globally unique identifier representing a concrete GraphQL ObjectType
  """
  id: ID!

  """
  The latest run for a given spec
  """
  latestRun: CloudRun

  """
  The organization the project is a member of
  """
  organization: CloudOrganization

  """
  Record keys for the service
  """
  recordKeys: [CloudRecordKey!]

  """
  A connection field type
  """
  runs(
    after: String
    before: String
    cypressVersion: String
    first: Int
    last: Int
    status: CloudRunStatus
  ): CloudRunConnection

  """
  Unique identifier for a Project
  """
  slug: String!
}

"""
A Connection adhering to the Relay Specification
"""
type CloudProjectConnection {
  """
  A list of edges.
  """
  edges: [CloudProjectEdge!]!

  """
  A list of nodes.
  """
  nodes: [CloudProject!]!

  """
  PageInfo result for the connection
  """
  pageInfo: PageInfo!
}

type CloudProjectEdge {
  cursor: String!

  """
  An edge adhering to the Relay Connection spec
  """
  node: CloudProject!
}

type CloudRecordKey implements Node {
  createdAt: DateTime

  """
  Globally unique identifier representing a concrete GraphQL ObjectType
  """
  id: ID!

  """
  The Record Key
  """
  key: String
  lastUsedAt: DateTime
}

"""
A Recorded run of the Test Runner, typically to the cloud
"""
type CloudRun implements Node {
  commitInfo: CloudRunCommitInfo
  createdAt: Date

  """
  Globally unique identifier representing a concrete GraphQL ObjectType
  """
  id: ID!
  status: CloudRunStatus

  """
  Total duration of the run in milliseconds, accounting for any parallelization
  """
  totalDuration: Int

  """
  This is the number of failed tests across all groups in the run
  """
  totalFailed: Int

  """
  This is the number of passed tests across all groups in the run
  """
  totalPassed: Int

  """
  This is the number of pending tests across all groups in the run
  """
  totalPending: Int

  """
  This is the number of running tests across all groups in the run
  """
  totalRunning: Int

  """
  This is the number of skipped tests across all groups in the run
  """
  totalSkipped: Int

  """
  This is the number of tests across all groups in the run
  """
  totalTests: Int
}

type CloudRunCommitInfo {
  authorAvatar: String
  authorEmail: String
  authorName: String
  branch: String
  branchUrl: String
  message(
    """
    Number of characters to truncate the commit message to
    """
    truncate: Int
  ): String
  sha: String
  summary: String
  url: String
}

"""
Connection type for CloudRun, adhering to the Relay Connection spec
"""
type CloudRunConnection {
  """
  A list of edges.
  """
  edges: [CloudRunEdge!]!

  """
  A list of nodes.
  """
  nodes: [CloudRun!]!

  """
  PageInfo result for the connection
  """
  pageInfo: PageInfo!
}

"""
Represents an individual Cloud test Run
"""
type CloudRunEdge {
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CloudRun!
}

"""
Possible check status of the test run
"""
enum CloudRunStatus {
  CANCELLED
  ERRORED
  FAILED
  NOTESTS
  OVERLIMIT
  PASSED
  RUNNING
  TIMEDOUT
}

"""
A CloudUser represents an User stored in the Cypress Cloud
"""
type CloudUser implements Node {
  email: String

  """
  The display name of the user, if we have one
  """
  fullName: String

  """
  Globally unique identifier representing a concrete GraphQL ObjectType
  """
  id: ID!

  """
  A connection field type
  """
  organizations(
    after: String
    before: String
    first: Int
    last: Int
  ): CloudOrganizationConnection

  """
  Whether this user is the currently authenticated user
  """
  userIsViewer: Boolean!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
Mutations for the Cypress Cloud
"""
type Mutation {
  """
  Adding as a test
  """
  test: Boolean
}

"""
Implements the Relay Node spec
"""
interface Node {
  """
  Globally unique identifier representing a concrete GraphQL ObjectType
  """
  id: ID!
}

"""
PageInfo object, adhering to the Relay Connection Spec:

https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  Must be the cursor corresponding to the last node in edges. Null if no such node exists
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  If the client is paginating with first/after, then the server must return true if further edges
  exist, otherwise false. If the client is paginating with last/before, then the client may return
  true if edges further from before exist, if it can do so efficiently, otherwise may return false.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  If the client is paginating with last/before, then the server must return true if prior edges exist,
  otherwise false. If the client is paginating with first/after, then the client may return true if
  edges prior to after exist, if it can do so efficiently, otherwise may return false.
  """
  hasPreviousPage: Boolean!

  """
  Must be the cursor corresponding to the first node in edges. Null if no such node exists
  """
  startCursor: String
}

type Query {
  """
  Returns an object conforming to the Relay spec
  """
  cloudNode(
    """
    An ID for a Node conforming to the Relay spec
    """
    id: ID!
  ): Node

  """
  Lookup an individual project by the slug
  """
  cloudProjectBySlug(slug: String!): CloudProject

  """
  Lookup a list of projects by their slug
  """
  cloudProjectsBySlugs(
    """
    A list of Project slugs
    """
    slugs: [String!]!
  ): [CloudProject]

  """
  A user within the Cypress Cloud
  """
  cloudViewer: CloudUser
}
