### This file was generated by Nexus Schema
### Do not make changes to this file directly

"""
A CloudOrganization represents an Organization stored in the Cypress Cloud
"""
type CloudOrganization implements Node {
  """
  Globally unique identifier representing a concrete GraphQL ObjectType
  """
  id: ID!

  """
  Name of the organization
  """
  name: String

  """
  A connection for cloud projects associated with this organization
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor
    """
    before: String

    """
    Returns the first n elements from the list.
    """
    first: Int

    """
    Returns the last n elements from the list.
    """
    last: Int
  ): CloudProjectConnection
}

type CloudOrganizationConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [CloudOrganizationEdge!]!

  """
  Flattened list of CloudOrganization type
  """
  nodes: [CloudOrganization!]!

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type CloudOrganizationEdge {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor
  """
  cursor: String!

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Node
  """
  node: CloudOrganization!
}

"""
A CloudProject represents a Project stored in the Cypress Cloud
"""
type CloudProject implements Node {
  """
  A link to the settings page of the project in the dashboard
  """
  cloudProjectSettingsUrl: String!

  """
  A link to the project in the dashboard
  """
  cloudProjectUrl: String!

  """
  Globally unique identifier representing a concrete GraphQL ObjectType
  """
  id: ID!

  """
  The latest run for a given spec
  """
  latestRun: CloudRun

  """
  Given name of the project
  """
  name: String!

  """
  The organization the project is a member of
  """
  organization: CloudOrganization

  """
  Record keys for the service
  """
  recordKeys: [CloudRecordKey!]

  """
  A connection field type
  """
  runs(
    """
    Returns the elements in the list that come after the specified cursor
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor
    """
    before: String
    cypressVersion: String

    """
    Returns the first n elements from the list.
    """
    first: Int

    """
    Returns the last n elements from the list.
    """
    last: Int
    status: CloudRunStatus
  ): CloudRunConnection

  """
  Unique identifier for a Project
  """
  slug: String!
}

type CloudProjectConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [CloudProjectEdge!]!

  """
  Flattened list of CloudProject type
  """
  nodes: [CloudProject!]!

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type CloudProjectEdge {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor
  """
  cursor: String!

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Node
  """
  node: CloudProject!
}

"""
Unable to find cloud project
"""
type CloudProjectNotFound {
  """
  an error message
  """
  message: String!
}

union CloudProjectResult =
    CloudProject
  | CloudProjectNotFound
  | CloudProjectUnauthorized

"""
Unauthorized access
"""
type CloudProjectUnauthorized {
  """
  does the user have a requested access pending
  """
  hasRequestedAccess: Boolean

  """
  an error message
  """
  message: String!
}

type CloudRecordKey implements Node {
  createdAt: DateTime

  """
  Globally unique identifier representing a concrete GraphQL ObjectType
  """
  id: ID!

  """
  The Record Key
  """
  key: String
  lastUsedAt: DateTime
}

"""
A Recorded run of the Test Runner, typically to the cloud
"""
type CloudRun implements Node {
  commitInfo: CloudRunCommitInfo
  createdAt: DateTime

  """
  Globally unique identifier representing a concrete GraphQL ObjectType
  """
  id: ID!
  status: CloudRunStatus
  tags: [CloudRunTag]

  """
  Total duration of the run in milliseconds, accounting for any parallelization
  """
  totalDuration: Int

  """
  This is the number of failed tests across all groups in the run
  """
  totalFailed: Int

  """
  Number of flaky tests, null if flake detection is not enabled
  """
  totalFlakyTests: Int

  """
  This is the number of passed tests across all groups in the run
  """
  totalPassed: Int

  """
  This is the number of pending tests across all groups in the run
  """
  totalPending: Int

  """
  This is the number of running tests across all groups in the run
  """
  totalRunning: Int

  """
  This is the number of skipped tests across all groups in the run
  """
  totalSkipped: Int

  """
  This is the number of tests across all groups in the run
  """
  totalTests: Int

  """
  A link to the run page
  """
  url: String
}

type CloudRunCommitInfo {
  authorAvatar: String
  authorEmail: String
  authorName: String
  branch: String
  branchUrl: String
  message(
    """
    Number of characters to truncate the commit message to
    """
    truncate: Int
  ): String
  sha: String
  summary: String
  url: String
}

type CloudRunConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [CloudRunEdge!]!

  """
  Flattened list of CloudRun type
  """
  nodes: [CloudRun!]!

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type CloudRunEdge {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor
  """
  cursor: String!

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Node
  """
  node: CloudRun!
}

"""
Possible check status of the test run
"""
enum CloudRunStatus {
  CANCELLED
  ERRORED
  FAILED
  NOTESTS
  OVERLIMIT
  PASSED
  RUNNING
  TIMEDOUT
}

type CloudRunTag implements Node {
  """
  Globally unique identifier representing a concrete GraphQL ObjectType
  """
  id: ID!
  name: String
}

"""
A CloudUser represents an User stored in the Cypress Cloud
"""
type CloudUser implements Node {
  """
  Url to manage cloud organizations for this user
  """
  cloudOrganizationsUrl: String

  """
  Url to the profile of the current user on the dashboard
  """
  cloudProfileUrl: String

  """
  Url to create a cloud organization for this user
  """
  createCloudOrganizationUrl: String
  email: String

  """
  The display name of the user, if we have one
  """
  fullName: String

  """
  Globally unique identifier representing a concrete GraphQL ObjectType
  """
  id: ID!

  """
  A connection field type
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor
    """
    before: String

    """
    Returns the first n elements from the list.
    """
    first: Int

    """
    Returns the last n elements from the list.
    """
    last: Int
  ): CloudOrganizationConnection

  """
  Whether this user is the currently authenticated user
  """
  userIsViewer: Boolean!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Mutation {
  """
  Create a project in the dashboard and return its object
  """
  cloudProjectCreate(
    ciProviders: [String!]
    name: String!
    orgId: ID!
    public: Boolean!
  ): CloudProject

  """
  Request access to an organization from a projectId
  """
  cloudProjectRequestAccess(projectSlug: String!): CloudProjectResult

  """
  Adding as a test
  """
  test: Boolean
}

"""
Implements the Relay Node spec
"""
interface Node {
  """
  Globally unique identifier representing a concrete GraphQL ObjectType
  """
  id: ID!
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Query {
  """
  Returns an object conforming to the Relay spec
  """
  cloudNode(
    """
    An ID for a Node conforming to the Relay spec
    """
    id: ID!
  ): Node

  """
  Returns a list of cloud nodes, by ID. Max 100 nodes per batch
  """
  cloudNodesByIds(
    """
    A list of IDs for a Node, conforming to the Relay spec
    """
    ids: [ID!]!
  ): [Node]

  """
  Lookup an individual project by the slug
  """
  cloudProjectBySlug(slug: String!): CloudProjectResult

  """
  Lookup a list of projects by their slug
  """
  cloudProjectsBySlugs(
    """
    A list of Project slugs
    """
    slugs: [String!]!
  ): [CloudProjectResult]

  """
  A user within the Cypress Cloud
  """
  cloudViewer: CloudUser
}
