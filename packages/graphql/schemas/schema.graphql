### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""Base error"""
type BaseError {
  message: String
  stack: String
  title: String
}

"""Container representing a browser"""
type Browser implements Node {
  channel: String!
  disabled: Boolean!
  displayName: String!
  family: BrowserFamily!

  """Relay style Node ID field for the Browser field"""
  id: ID!
  isSelected: Boolean!
  majorVersion: String
  name: String!
  path: String!
  version: String!
}

enum BrowserFamily {
  chromium
  firefox
}

"""
A CloudOrganization represents an Organization stored in the Cypress Cloud
"""
type CloudOrganization implements Node {
  """Globally unique identifier representing a concrete GraphQL ObjectType"""
  id: ID!

  """Name of the organization"""
  name: String

  """A connection for cloud projects associated with this organization"""
  projects(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): CloudProjectConnection
}

type CloudOrganizationConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [CloudOrganizationEdge!]!

  """Flattened list of CloudOrganization type"""
  nodes: [CloudOrganization!]!

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type CloudOrganizationEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: CloudOrganization!
}

"""A CloudProject represents a Project stored in the Cypress Cloud"""
type CloudProject implements Node {
  """A link to the settings page of the project in the dashboard"""
  cloudProjectSettingsUrl: String!

  """A link to the project in the dashboard"""
  cloudProjectUrl: String!

  """Globally unique identifier representing a concrete GraphQL ObjectType"""
  id: ID!

  """The latest run for a given spec"""
  latestRun: CloudRun

  """Given name of the project"""
  name: String!

  """The organization the project is a member of"""
  organization: CloudOrganization

  """Record keys for the service"""
  recordKeys: [CloudRecordKey!]

  """A connection field type"""
  runs(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String
    cypressVersion: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
    status: CloudRunStatus
  ): CloudRunConnection

  """Unique identifier for a Project"""
  slug: String!
}

type CloudProjectConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [CloudProjectEdge!]!

  """Flattened list of CloudProject type"""
  nodes: [CloudProject!]!

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type CloudProjectEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: CloudProject!
}

"""Unable to find cloud project"""
type CloudProjectNotFound {
  """an error message"""
  message: String!
}

union CloudProjectResult = CloudProject | CloudProjectNotFound | CloudProjectUnauthorized

"""Unauthorized access"""
type CloudProjectUnauthorized {
  """does the user have a requested access pending"""
  hasRequestedAccess: Boolean

  """an error message"""
  message: String!
}

type CloudRecordKey implements Node {
  createdAt: DateTime

  """Globally unique identifier representing a concrete GraphQL ObjectType"""
  id: ID!

  """The Record Key"""
  key: String
  lastUsedAt: DateTime
}

"""A Recorded run of the Test Runner, typically to the cloud"""
type CloudRun implements Node {
  commitInfo: CloudRunCommitInfo
  createdAt: DateTime

  """Globally unique identifier representing a concrete GraphQL ObjectType"""
  id: ID!
  status: CloudRunStatus

  """
  Total duration of the run in milliseconds, accounting for any parallelization
  """
  totalDuration: Int

  """This is the number of failed tests across all groups in the run"""
  totalFailed: Int

  """This is the number of passed tests across all groups in the run"""
  totalPassed: Int

  """This is the number of pending tests across all groups in the run"""
  totalPending: Int

  """This is the number of running tests across all groups in the run"""
  totalRunning: Int

  """This is the number of skipped tests across all groups in the run"""
  totalSkipped: Int

  """This is the number of tests across all groups in the run"""
  totalTests: Int

  """A link to the run page"""
  url: String
}

type CloudRunCommitInfo {
  authorAvatar: String
  authorEmail: String
  authorName: String
  branch: String
  branchUrl: String
  message(
    """Number of characters to truncate the commit message to"""
    truncate: Int
  ): String
  sha: String
  summary: String
  url: String
}

type CloudRunConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [CloudRunEdge!]!

  """Flattened list of CloudRun type"""
  nodes: [CloudRun!]!

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type CloudRunEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: CloudRun!
}

"""Possible check status of the test run"""
enum CloudRunStatus {
  CANCELLED
  ERRORED
  FAILED
  NOTESTS
  OVERLIMIT
  PASSED
  RUNNING
  TIMEDOUT
}

"""A CloudUser represents an User stored in the Cypress Cloud"""
type CloudUser implements Node {
  """Url to manage cloud organizations for this user"""
  cloudOrganizationsUrl: String

  """Url to the profile of the current user on the dashboard"""
  cloudProfileUrl: String

  """Url to create a cloud organization for this user"""
  createCloudOrganizationUrl: String
  email: String

  """The display name of the user, if we have one"""
  fullName: String

  """Globally unique identifier representing a concrete GraphQL ObjectType"""
  id: ID!

  """A connection field type"""
  organizations(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): CloudOrganizationConnection

  """Whether this user is the currently authenticated user"""
  userIsViewer: Boolean!
}

enum CodeGenGenResultType {
  binary
  text
}

"""Glob patterns for detecting files for code gen."""
type CodeGenGlobs implements Node {
  component: String!

  """Relay style Node ID field for the CodeGenGlobs field"""
  id: ID!
  story: String!
}

"""Represents a spec on the file system"""
type CodeGenResult implements Node {
  """Content of generated file."""
  content: String!

  """Absolute path of generated file."""
  file: String!

  """Relay style Node ID field for the CodeGenResult field"""
  id: ID!
  status: CodeGenStatus!
  type: CodeGenGenResultType!
}

"""Result of generated file with file parts"""
type CodeGenResultWithFileParts {
  codeGenResult: CodeGenResult!
  fileParts: FileParts!
}

enum CodeGenStatus {
  add
  overwrite
  skipped
}

enum CodeGenType {
  component
  integration
  scaffoldIntegration
  story
}

enum CodeLanguageEnum {
  js
  ts
}

"""
The currently opened Cypress project, represented by a cypress.config.{ts|js} file
"""
type CurrentProject implements Node & ProjectLike {
  """The current branch of the project"""
  branch: String

  """Browsers found that are compatible with Cypress"""
  browsers: [Browser!]

  """The remote associated project from Cypress Cloud"""
  cloudProject: CloudProjectResult

  """List of all code generation candidates stories"""
  codeGenCandidates(glob: String!): [FileParts]
  codeGenGlobs: CodeGenGlobs!

  """Project configuration"""
  config: JSON!

  """Config File Absolute Path"""
  configFileAbsolutePath: String

  """Config File Path"""
  configFilePath: String

  """The currently selected browser for the application"""
  currentBrowser: Browser

  """The mode the interactive runner was launched in"""
  currentTestingType: TestingTypeEnum

  """Relay style Node ID field for the CurrentProject field"""
  id: ID!

  """Whether the user configured this project to use Component Testing"""
  isCTConfigured: Boolean!

  """Whether the user configured this project to use e2e Testing"""
  isE2EConfigured: Boolean!

  """Whether we are currently refreshing the browsers list"""
  isRefreshingBrowsers: Boolean!

  """Cached preferences for this project"""
  preferences: ProjectPreferences

  """Used to associate project with Cypress cloud"""
  projectId: String

  """Absolute path to the project on the filesystem"""
  projectRoot: String!

  """Specs for a project conforming to Relay Connection specification"""
  specs(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): SpecConnection
  storybook: Storybook
  title: String!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

enum DevRelaunchAction {
  dismiss
  trigger
}

"""State associated/helpful for local development of Cypress"""
type DevState {
  """
  When we have edited server related files, we may want to relaunch the client.
  """
  needsRelaunch: Boolean

  """For debugging, the current application state"""
  state: JSON
}

"""Represents an editor on the local machine"""
type Editor {
  """Binary that opens the editor"""
  binary: String!
  id: String!

  """name of editor"""
  name: String!
}

input FileDetailsInput {
  absolute: String!
  column: Int
  line: Int
}

"""Represents a spec on the file system"""
type FileParts implements Node {
  """
  Absolute path to spec (e.g. /Users/jess/my-project/src/component/MySpec.test.tsx)
  """
  absolute: String!

  """
  Full name of spec file (e.g. MySpec.test.tsx) without the spec extension
  """
  baseName: String!

  """
  The spec file's extension, including "spec" pattern (e.g. .spec.tsx, -spec.tsx, -test.tsx)
  """
  fileExtension: String!

  """The first part of the file, without extensions (e.g. MySpec)"""
  fileName: String!

  """Relay style Node ID field for the FileParts field"""
  id: ID!

  """Full name of spec file (e.g. MySpec.test.tsx)"""
  name: String!

  """Relative path to spec (e.g. src/component/MySpec.test.tsx)"""
  relative: String!
}

enum FrontendFrameworkCategoryEnum {
  react
  vue
}

enum FrontendFrameworkEnum {
  cra
  nextjs
  nuxtjs
  react
  vue
  vuecli
}

type GeneratedSpec {
  """File content of most recently generated spec."""
  content: String!
  id: ID!
  spec: FileParts!
}

"""Git information about a spec file"""
type GitInfo {
  """Last person to change the file in git"""
  author: String

  """last modified as a pretty string, eg 2 days ago"""
  lastModifiedHumanReadable: String

  """last modified timestamp, eg 2021-09-14 13:43:19 +1000"""
  lastModifiedTimestamp: String
}

"""A project which exists on the filesystem but has not been opened"""
type GlobalProject implements Node & ProjectLike {
  """Relay style Node ID field for the GlobalProject field"""
  id: ID!

  """Used to associate project with Cypress cloud"""
  projectId: String

  """Absolute path to the project on the filesystem"""
  projectRoot: String!
  title: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""local settings on a device-by-device basis"""
type LocalSettings {
  availableEditors: [Editor!]!
  preferences: LocalSettingsPreferences!
}

"""local setting preferences"""
type LocalSettingsPreferences {
  autoScrollingEnabled: Boolean
  isSpecsListOpen: Boolean
  preferredEditorBinary: String
  proxyBypass: String
  proxyServer: String
  reporterWidth: Int
  specListWidth: Int
}

"""
The Wizard is a container for any state associated with initial onboarding to Cypress
"""
type Migration {
  """contents of the cypress.json file after conversion"""
  configAfterCode: String!

  """contents of the cypress.json file before conversion"""
  configBeforeCode: String!

  """List of files needing manual conversion"""
  manualFiles: [String!]!

  """All spec files after conversion"""
  specFilesAfter: [String!]!

  """All spec files before being converted"""
  specFilesBefore: [String!]!

  """Step where the migration is right now"""
  step: MigrationStepEnum!
}

enum MigrationStepEnum {
  configFile
  renameAuto
  renameManual
}

type Mutation {
  """Add project to projects array and cache it"""
  addProject(
    """Whether to open the project when added"""
    open: Boolean
    path: String!
  ): Boolean

  """Create an Index HTML file for a new component testing project"""
  appCreateComponentIndexHtml(template: String!): Boolean
  clearActiveProject: Boolean

  """Create a project in the dashboard and return its object"""
  cloudProjectCreate(ciProviders: [String!], name: String!, orgId: ID!, public: Boolean!): CloudProject

  """Request access to an organization from a projectId"""
  cloudProjectRequestAccess(projectSlug: String!): Boolean

  """
  Development only: Triggers or dismisses a prompted refresh by touching the file watched by our development scripts
  """
  devRelaunch(action: DevRelaunchAction!): Boolean

  """Generate spec from source"""
  generateSpecFromSource(codeGenCandidate: String!, type: CodeGenType!): GeneratedSpec

  """Hides the launchpad windows"""
  hideBrowserWindow: Boolean!

  """
  Initializes open_project global singleton to manager current project state
  """
  initializeOpenProject: Boolean
  internal_clearAllProjectPreferencesCache: Boolean
  internal_clearLatestProjectCache: Boolean
  internal_clearProjectPreferencesCache(projectTitle: String!): Boolean

  """Launches project from open_project global singleton"""
  launchOpenProject(specPath: String): Boolean

  """Sets the active browser"""
  launchpadSetBrowser(
    """ID of the browser that we want to set"""
    id: ID!
  ): Boolean

  """Auth with Cypress Cloud"""
  login: Boolean

  """Log out of Cypress Cloud"""
  logout: Boolean

  """Open a path in preferred IDE"""
  openDirectoryInIDE(path: String!): Boolean
  openExternal(url: String!): Boolean

  """Open a file on specified line and column in preferred IDE"""
  openFileInIDE(input: FileDetailsInput!): Boolean

  """Open a path in the local file explorer"""
  openInFinder(path: String!): Boolean

  """show the launchpad windows"""
  reconfigureProject: Boolean!

  """Remove project from projects array and cache"""
  removeProject(path: String!): Boolean

  """Reset the Wizard to the starting position"""
  resetWizard: Boolean!
  scaffoldIntegration: [CodeGenResultWithFileParts!]!

  """Set active project to run tests on"""
  setActiveProject(path: String!): Boolean

  """
  Update local preferences (also known as  appData). The payload, `value`, should be a `JSON.stringified()` object of the new values you'd like to persist. Example: `setPreferences (value: JSON.stringify({ lastOpened: Date.now() }))`
  """
  setPreferences(value: String!): Boolean

  """Save the projects preferences to cache"""
  setProjectPreferences(browserPath: String!, testingType: TestingTypeEnum!): Query!

  """show the launchpad at the browser picker step"""
  showElectronOnAppExit: Boolean

  """Sets the frontend bundler we want to use for the project"""
  wizardSetBundler(bundler: SupportedBundlers!): Boolean

  """Sets the language we want to use for the config file"""
  wizardSetCodeLanguage(language: CodeLanguageEnum!): Boolean

  """Sets the frontend framework we want to use for the project"""
  wizardSetFramework(framework: FrontendFrameworkEnum!): Boolean

  """Updates the different fields of the wizard data store"""
  wizardUpdate(input: WizardUpdateInput!): Boolean
}

"""Implements the Relay Node spec"""
interface Node {
  """Globally unique identifier representing a concrete GraphQL ObjectType"""
  id: ID!
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

enum PluginsState {
  error
  initialized
  initializing
  uninitialized
}

"""Common base fields inherited by GlobalProject / CurrentProject"""
interface ProjectLike {
  """Used to associate project with Cypress cloud"""
  projectId: String

  """Absolute path to the project on the filesystem"""
  projectRoot: String!
  title: String!
}

"""Preferences specific to a project"""
type ProjectPreferences {
  """The preferred browser to launch"""
  browserPath: String

  """The preferred testing type to start in"""
  testingType: String
}

"""The root "Query" type containing all entry fields for our querying"""
type Query {
  baseError: BaseError

  """Returns an object conforming to the Relay spec"""
  cloudNode(
    """An ID for a Node conforming to the Relay spec"""
    id: ID!
  ): Node

  """Lookup an individual project by the slug"""
  cloudProjectBySlug(slug: String!): CloudProjectResult

  """Lookup a list of projects by their slug"""
  cloudProjectsBySlugs(
    """A list of Project slugs"""
    slugs: [String!]!
  ): [CloudProjectResult]

  """A user within the Cypress Cloud"""
  cloudViewer: CloudUser

  """The currently opened project"""
  currentProject: CurrentProject

  """The state of any info related to local development of the runner"""
  dev: DevState!

  """Whether the browser has been opened for auth or not"""
  isAuthBrowserOpened: Boolean!

  """Whether the app is in global mode or not"""
  isInGlobalMode: Boolean!

  """local settings on a device-by-device basis"""
  localSettings: LocalSettings!

  """Metadata about the migration, null if we aren't showing it"""
  migration: Migration

  """All known projects for the app"""
  projects: [ProjectLike!]!

  """Previous versions of cypress and their release date"""
  versions: VersionData

  """Metadata about the wizard"""
  wizard: Wizard!
}

"""Represents a spec on the file system"""
type Spec implements Node {
  """
  Absolute path to spec (e.g. /Users/jess/my-project/src/component/MySpec.test.tsx)
  """
  absolute: String!

  """
  Full name of spec file (e.g. MySpec.test.tsx) without the spec extension
  """
  baseName: String!

  """The file extension (e.g. tsx, jsx)"""
  fileExtension: String!

  """The first part of the file, without extensions (e.g. MySpec)"""
  fileName: String!

  """Git information about the spec file"""
  gitInfo: GitInfo

  """Relay style Node ID field for the Spec field"""
  id: ID!

  """Full name of spec file (e.g. MySpec.test.tsx)"""
  name: String!

  """Relative path to spec (e.g. src/component/MySpec.test.tsx)"""
  relative: String!

  """
  The spec file's extension, including "spec" patterm (e.g. .spec.tsx, -spec.tsx, -test.tsx)
  """
  specFileExtension: String!

  """Type of spec (e.g. component | integration)"""
  specType: SpecType!
}

type SpecConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [SpecEdge!]!

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type SpecEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Spec!
}

enum SpecType {
  component
  integration
}

"""Storybook"""
type Storybook implements Node {
  """Relay style Node ID field for the Storybook field"""
  id: ID!

  """Folder containing storybook configuration files"""
  storybookRoot: String!
}

"""The bundlers that we can use with Cypress"""
enum SupportedBundlers {
  vite
  webpack
}

enum TestingTypeEnum {
  component
  e2e
}

type TestingTypeInfo implements Node {
  description: String!

  """Relay style Node ID field for the TestingTypeInfo field"""
  id: ID!
  title: String!
  type: TestingTypeEnum!
}

"""Version of Cypress and release date"""
type Version {
  """unique id"""
  id: String!

  """Release date as an iso8601 timestamp"""
  released: String!

  """Version number (follows semantic versioning)"""
  version: String!
}

"""Version of Cypress and release date"""
type VersionData {
  """current version of cypress you are using"""
  current: Version!

  """latest version of cypress"""
  latest: Version!
}

"""A warning"""
type Warning {
  message: String!
  setupStep: String
  title: String!
}

"""
The Wizard is a container for any state associated with initial onboarding to Cypress
"""
type Wizard {
  """All of the bundlers to choose from"""
  allBundlers: [WizardBundler!]!

  """All of the languages to choose from"""
  allLanguages: [WizardCodeLanguage!]!
  bundler: WizardBundler

  """
  Given the current state, returns whether the user progress to the next step of the wizard
  """
  canNavigateForward: Boolean!

  """Whether the plugins for the selected testing type has been initialized"""
  chosenTestingTypePluginsInitialized: Boolean!

  """The title of the page, given the current step of the wizard"""
  description: String
  framework: WizardFrontendFramework

  """All of the component testing frameworks to choose from"""
  frameworks: [WizardFrontendFramework!]!

  """Whether we have chosen manual install or not"""
  isManualInstall: Boolean!
  language: WizardCodeLanguage

  """
  A list of packages to install, null if we have not chosen both a framework and bundler
  """
  packagesToInstall: [WizardNpmPackage!]

  """
  Set of sample configuration files based bundler, framework and language of choice
  """
  sampleConfigFiles: [WizardSampleConfigFile!]

  """IndexHtml file based on bundler and framework of choice"""
  sampleTemplate: String
  step: WizardStep!

  """
  The testing type we are setting in the wizard, null if this has not been chosen
  """
  testingType: TestingTypeEnum

  """The title of the page, given the current step of the wizard"""
  title: String

  """A list of warnings"""
  warnings: [Warning!]!
}

"""Wizard bundler"""
type WizardBundler implements Node {
  """Relay style Node ID field for the WizardBundler field"""
  id: ID!

  """Whether this is the selected framework bundler"""
  isSelected: Boolean

  """Display name of the bundler"""
  name: String!

  """Package to install associated with the bundler"""
  package: String!

  """The name of the framework"""
  type: SupportedBundlers!
}

"""
A code language that the user can choose from to create their cypress.config
"""
type WizardCodeLanguage implements Node {
  """Relay style Node ID field for the WizardCodeLanguage field"""
  id: ID!

  """Whether this is the selected language in the wizard"""
  isSelected: Boolean!

  """The name of the language"""
  name: String!

  """The key of the language"""
  type: CodeLanguageEnum!
}

enum WizardConfigFileStatusEnum {
  changes
  error
  skipped
  valid
}

"""A frontend framework that we can setup within the app"""
type WizardFrontendFramework implements Node {
  """Classification or label of framework. e.g. React, Vue, or Other"""
  category: FrontendFrameworkCategoryEnum!

  """Relay style Node ID field for the WizardFrontendFramework field"""
  id: ID!

  """Whether this is the selected framework in the wizard"""
  isSelected: Boolean!

  """The name of the framework"""
  name: String!

  """All of the supported bundlers for this framework"""
  supportedBundlers: [WizardBundler!]!

  """The name of the framework"""
  type: FrontendFrameworkEnum!
}

enum WizardNavigateDirection {
  back
  forward
}

"""Details about an NPM Package listed during the wizard install"""
type WizardNpmPackage implements Node {
  description: String!

  """Relay style Node ID field for the WizardNpmPackage field"""
  id: ID!

  """The package name that you would npm install"""
  name: String!
  package: String!
}

"""Each config file suggestion given by the wizard"""
type WizardSampleConfigFile implements Node {
  content: String!
  description: String
  filePath: String!

  """Relay style Node ID field for the WizardSampleConfigFile field"""
  id: ID!
  status: WizardConfigFileStatusEnum!
}

enum WizardStep {
  configFiles
  initializePlugins
  installDependencies
  selectFramework
  setupComplete
  welcome
}

input WizardUpdateInput {
  direction: WizardNavigateDirection
  testingType: TestingTypeEnum
}
